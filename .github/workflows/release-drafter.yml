name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

    - name: Check out code

    - name: Get release version
      id: get-version
      run: |
          export VERSION=$(TZ=":America/Los_Angeles" date "+%Y-%m-%d")
          echo ::set-output name=version::${VERSION}
          echo "Version set to ${VERSION}"

    - name: Check that release doesn't exist
      id: check-release
      run: |
        echo ${{ github.repository }}
        echo ${{ github.repository_owner }}

        gh release list \
          --json tagName \
          --jq "map(select(.tagName | startswith(\"${VERSION}\")))|length"
        # export RELEASE_EXISTS=$(gh release list --json tagName --jq "map(select(.tagName | startswith(\"${VERSION}\")))|length")
        # if [ $RELEASE_EXISTS -gt 0 ]; then
        #   echo "Release already exists for version ${VERSION}"
        #   exit 1
        # fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - uses: release-drafter/release-drafter@v6
      with:
        tag: ${{ steps.get-version.outputs.version }}
        name: ${{ steps.get-version.outputs.version }}
        version: ${{ steps.get-version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
